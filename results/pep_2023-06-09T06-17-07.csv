number,name,status
1,PEP 1 – PEP Purpose and Guidelines,1
227,PEP 227 – Statically Nested Scopes,1
234,PEP 234 – Iterators,1
230,PEP 230 – Warning Framework,1
228,PEP 228 – Reworking Python’s Numeric Model,1
229,PEP 229 – Using Distutils to Build Python,1
231,PEP 231 – __findattr__(),1
232,PEP 232 – Function Attributes,1
233,PEP 233 – Python Online Help,1
226,PEP 226 – Python 2.1 Release Schedule,1
224,PEP 224 – Attribute Docstrings,1
225,PEP 225 – Elementwise/Objectwise Operators,1
223,PEP 223 – Change the Meaning of ,1
222,PEP 222 – Web Library Enhancements,1
8104,PEP 8104 – 2023 Term Steering Council election,1
220,"PEP 220 – Coroutines, Generators, Continuations",1
221,PEP 221 – Import As,1
8103,PEP 8103 – 2022 Term Steering Council election,1
8102,PEP 8102 – 2021 Term Steering Council election,1
8101,PEP 8101 – 2020 Term Steering Council election,1
8014,PEP 8014 – The Commons Governance Model,1
8100,PEP 8100 – January 2019 Steering Council election,1
8015,PEP 8015 – Organization of the Python community,1
8016,PEP 8016 – The Steering Council Model,1
8012,PEP 8012 – The Community Governance Model,1
8001,PEP 8001 – Python Governance Voting Process,1
8011,PEP 8011 – Python Governance Model Lead by Trio of Pythonistas,1
8010,PEP 8010 – The Technical Leader Governance Model,1
8002,PEP 8002 – Open Source Governance Survey,1
8000,PEP 8000 – Python Language Governance Proposal Overview,1
8013,PEP 8013 – The External Council Governance Model,1
3156,PEP 3156 – Asynchronous IO Support Rebooted: the “asyncio” Module,1
3333,PEP 3333 – Python Web Server Gateway Interface v1.0.1,1
3155,PEP 3155 – Qualified name for classes and functions,1
3154,PEP 3154 – Pickle protocol version 4,1
3149,PEP 3149 – ABI version tagged .so files,1
3151,PEP 3151 – Reworking the OS and IO exception hierarchy,1
3152,PEP 3152 – Cofunctions,1
3153,PEP 3153 – Asynchronous IO support,1
3150,PEP 3150 – Statement local namespaces (aka “given” clause),1
3148,PEP 3148 – futures - execute computations asynchronously,1
3145,PEP 3145 – Asynchronous I/O For subprocess.Popen,1
3144,PEP 3144 – IP Address Manipulation Library for the Python Standard Library,1
3147,PEP 3147 – PYC Repository Directories,1
3142,PEP 3142 – Add a “while” clause to generator expressions,1
3140,"PEP 3140 – str(container) should call str(item), not repr(item)",1
3143,PEP 3143 – Standard daemon process library,1
3146,PEP 3146 – Merging Unladen Swallow into CPython,1
3139,PEP 3139 – Cleaning out sys and the “interpreter” module,1
3141,PEP 3141 – A Type Hierarchy for Numbers,1
3138,PEP 3138 – String representation in Python 3000,1
3137,PEP 3137 – Immutable Bytes and Mutable Buffer,1
3136,PEP 3136 – Labeled break and continue,1
3135,PEP 3135 – New Super,1
3134,PEP 3134 – Exception Chaining and Embedded Tracebacks,1
3133,PEP 3133 – Introducing Roles,1
3132,PEP 3132 – Extended Iterable Unpacking,1
3131,PEP 3131 – Supporting Non-ASCII Identifiers,1
3130,PEP 3130 – Access to Current Module/Class/Function,1
3129,PEP 3129 – Class Decorators,1
3126,PEP 3126 – Remove Implicit String Concatenation,1
3125,PEP 3125 – Remove Backslash Continuation,1
3128,PEP 3128 – BList: A Faster List-like Type,1
3124,"PEP 3124 – Overloading, Generic Functions, Interfaces, and Adaptation",1
3122,PEP 3122 – Delineation of the main module,1
3123,PEP 3123 – Making PyObject_HEAD conform to standard C,1
3127,PEP 3127 – Integer Literal Support and Syntax,1
3121,PEP 3121 – Extension Module Initialization and Finalization,1
3120,PEP 3120 – Using UTF-8 as the default source encoding,1
3119,PEP 3119 – Introducing Abstract Base Classes,1
3118,PEP 3118 – Revising the buffer protocol,1
3116,PEP 3116 – New I/O,1
3117,PEP 3117 – Postfix type declarations,1
3115,PEP 3115 – Metaclasses in Python 3000,1
3113,PEP 3113 – Removal of Tuple Parameter Unpacking,1
3114,PEP 3114 – Renaming iterator.next() to iterator.__next__(),1
3112,PEP 3112 – Bytes literals in Python 3000,1
3111,PEP 3111 – Simple input built-in in Python 3000,1
3110,PEP 3110 – Catching Exceptions in Python 3000,1
3109,PEP 3109 – Raising Exceptions in Python 3000,1
3108,PEP 3108 – Standard Library Reorganization,1
3107,PEP 3107 – Function Annotations,1
3106,"PEP 3106 – Revamping dict.keys(), .values() and .items()",1
3105,PEP 3105 – Make print a function,1
3104,PEP 3104 – Access to Names in Outer Scopes,1
3103,PEP 3103 – A Switch/Case Statement,1
3102,PEP 3102 – Keyword-Only Arguments,1
3003,PEP 3003 – Python Language Moratorium,1
3100,PEP 3100 – Miscellaneous Python 3.0 Plans,1
3002,PEP 3002 – Procedure for Backwards-Incompatible Changes,1
3101,PEP 3101 – Advanced String Formatting,1
3099,PEP 3099 – Things that will Not Change in Python 3000,1
3001,PEP 3001 – Procedure for reviewing and improving standard library modules,1
3000,PEP 3000 – Python 3000,1
801,PEP 801 – Reserved,1
754,PEP 754 – IEEE 754 Floating Point Special Values,1
713,PEP 713 – Callable Modules,1
714,PEP 714 – Rename dist-info-metadata in the Simple API,1
712,PEP 712 – Adding a “converter” parameter to dataclasses.field,1
711,PEP 711 – PyBI: a standard format for distributing Python Binaries,1
710,PEP 710 – Recording the provenance of installed packages,1
709,PEP 709 – Inlined comprehensions,1
707,PEP 707 – A simplified signature for __exit__ and __aexit__,1
705,PEP 705 – TypedMapping: Type Hints for Mappings with a Fixed Set of Keys,1
704,PEP 704 – Require virtual environments by default for package installers,1
706,PEP 706 – Filter for tarfile.extractall,1
708,PEP 708 – Extending the Repository API to Mitigate Dependency Confusion Attacks,1
701,PEP 701 – Syntactic formalization of f-strings,1
703,PEP 703 – Making the Global Interpreter Lock Optional in CPython,1
699,PEP 699 – Remove private dict version field added in PEP 509,1
700,PEP 700 – Additional Fields for the Simple API for Package Indexes,1
702,PEP 702 – Marking deprecations using the type system,1
697,PEP 697 – Limited C API for Extending Opaque Types,1
698,PEP 698 – Override Decorator for Static Typing,1
696,PEP 696 – Type defaults for TypeVarLikes,1
694,PEP 694 – Upload 2.0 API for Python Package Repositories,1
695,PEP 695 – Type Parameter Syntax,1
687,PEP 687 – Isolating modules in the standard library,1
688,PEP 688 – Making the buffer protocol accessible in Python,1
692,PEP 692 – Using TypedDict for more precise **kwargs typing,1
689,PEP 689 – Unstable C API tier,1
693,PEP 693 – Python 3.12 Release Schedule,1
690,PEP 690 – Lazy Imports,1
691,PEP 691 – JSON-based Simple API for Python Package Indexes,1
685,PEP 685 – Comparison of extra names for optional distribution dependencies,1
686,PEP 686 – Make UTF-8 mode default,1
681,PEP 681 – Data Class Transforms,1
684,PEP 684 – A Per-Interpreter GIL,1
683,"PEP 683 – Immortal Objects, Using a Fixed Refcount",1
682,PEP 682 – Format Specifier for Signed Zero,1
680,PEP 680 – tomllib: Support for Parsing TOML in the Standard Library,1
679,PEP 679 – Allow parentheses in assert statements,1
678,PEP 678 – Enriching Exceptions with Notes,1
677,PEP 677 – Callable Type Syntax,1
673,PEP 673 – Self Type,1
676,PEP 676 – PEP Infrastructure Process,1
675,PEP 675 – Arbitrary Literal String Type,1
671,PEP 671 – Syntax for late-bound function argument defaults,1
674,PEP 674 – Disallow using macros as l-values,1
672,PEP 672 – Unicode-related Security Considerations for Python,1
670,PEP 670 – Convert macros to functions in the Python C API,1
669,PEP 669 – Low Impact Monitoring for CPython,1
668,PEP 668 – Marking Python base environments as “externally managed”,1
666,PEP 666 – Reject Foolish Indentation,1
665,PEP 665 – A file format to list Python dependencies for reproducibility of an application,1
667,PEP 667 – Consistent views of namespaces,1
664,PEP 664 – Python 3.11 Release Schedule,1
663,"PEP 663 – Standardizing Enum str(), repr(), and format() behaviors",1
662,PEP 662 – Editable installs via virtual wheels,1
661,PEP 661 – Sentinel Values,1
660,PEP 660 – Editable installs for pyproject.toml based builds (wheel based),1
658,PEP 658 – Serve Distribution Metadata in the Simple Repository API,1
659,PEP 659 – Specializing Adaptive Interpreter,1
655,PEP 655 – Marking individual TypedDict items as required or potentially-missing,1
656,PEP 656 – Platform Tag for Linux Distributions Using Musl,1
654,PEP 654 – Exception Groups and except*,1
653,PEP 653 – Precise Semantics for Pattern Matching,1
657,PEP 657 – Include Fine Grained Error Locations in Tracebacks,1
652,PEP 652 – Maintaining the Stable ABI,1
648,PEP 648 – Extensible customizations of the interpreter at startup,1
651,PEP 651 – Robust Stack Overflow Handling,1
650,PEP 650 – Specifying Installer Requirements for Python Projects,1
649,PEP 649 – Deferred Evaluation Of Annotations Using Descriptors,1
647,PEP 647 – User-Defined Type Guards,1
646,PEP 646 – Variadic Generics,1
644,PEP 644 – Require OpenSSL 1.1.1 or newer,1
643,PEP 643 – Metadata for Package Source Distributions,1
645,PEP 645 – Allow writing optional types as ,1
642,PEP 642 – Explicit Pattern Syntax for Structural Pattern Matching,1
641,PEP 641 – Using an underscore in the version portion of Python 3.10 compatibility tags,1
636,PEP 636 – Structural Pattern Matching: Tutorial,1
639,PEP 639 – Improving License Clarity with Better Package Metadata,1
638,PEP 638 – Syntactic Macros,1
640,PEP 640 – Unused variable syntax,1
637,PEP 637 – Support for indexing with keyword arguments,1
635,PEP 635 – Structural Pattern Matching: Motivation and Rationale,1
634,PEP 634 – Structural Pattern Matching: Specification,1
632,PEP 632 – Deprecate distutils module,1
633,PEP 633 – Dependency specification in pyproject.toml using an exploded TOML table,1
631,PEP 631 – Dependency specification in pyproject.toml based on PEP 508,1
630,PEP 630 – Isolating Extension Modules,1
629,PEP 629 – Versioning PyPI’s Simple API,1
628,PEP 628 – Add ,1
627,PEP 627 – Recording installed projects,1
626,PEP 626 – Precise line numbers for debugging and other tools.,1
625,PEP 625 – Filename of a Source Distribution,1
624,PEP 624 – Remove Py_UNICODE encoder APIs,1
623,PEP 623 – Remove wstr from Unicode,1
621,PEP 621 – Storing project metadata in pyproject.toml,1
622,PEP 622 – Structural Pattern Matching,1
618,PEP 618 – Add Optional Length-Checking To zip,1
620,PEP 620 – Hide implementation details from the C API,1
617,PEP 617 – New PEG parser for CPython,1
616,PEP 616 – String methods to remove prefixes and suffixes,1
615,PEP 615 – Support for the IANA Time Zone Database in the Standard Library,1
619,PEP 619 – Python 3.10 Release Schedule,1
613,PEP 613 – Explicit Type Aliases,1
611,PEP 611 – The one million limit,1
614,PEP 614 – Relaxing Grammar Restrictions On Decorators,1
608,PEP 608 – Coordinated Python release,1
607,PEP 607 – Reducing CPython’s Feature Delivery Latency,1
612,PEP 612 – Parameter Specification Variables,1
610,PEP 610 – Recording the Direct URL Origin of installed distributions,1
606,PEP 606 – Python Compatibility Version,1
609,PEP 609 – Python Packaging Authority (PyPA) Governance,1
605,PEP 605 – A rolling feature release stream for CPython,1
604,PEP 604 – Allow writing union types as ,1
603,PEP 603 – Adding a frozenmap type to collections,1
602,PEP 602 – Annual Release Cycle for Python,1
601,PEP 601 – Forbid return/break/continue breaking out of finally,1
600,PEP 600 – Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,1
599,PEP 599 – The manylinux2014 Platform Tag,1
598,PEP 598 – Introducing incremental feature releases,1
597,PEP 597 – Add optional EncodingWarning,1
595,PEP 595 – Improving bugs.python.org,1
596,PEP 596 – Python 3.9 Release Schedule,1
594,PEP 594 – Removing dead batteries from the standard library,1
593,PEP 593 – Flexible function and variable annotations,1
592,PEP 592 – Adding “Yank” Support to the Simple API,1
591,PEP 591 – Adding a final qualifier to typing,1
588,PEP 588 – GitHub Issues Migration Plan,1
589,PEP 589 – TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,1
590,PEP 590 – Vectorcall: a fast calling protocol for CPython,1
587,PEP 587 – Python Initialization Configuration,1
586,PEP 586 – Literal Types,1
583,PEP 583 – A Concurrency Memory Model for Python,1
582,PEP 582 – Python local packages directory,1
584,PEP 584 – Add Union Operators To dict,1
585,PEP 585 – Type Hinting Generics In Standard Collections,1
581,PEP 581 – Using GitHub Issues for CPython,1
580,PEP 580 – The C call protocol,1
579,PEP 579 – Refactoring C functions and methods,1
577,PEP 577 – Augmented Assignment Expressions,1
578,PEP 578 – Python Runtime Audit Hooks,1
576,PEP 576 – Rationalize Built-in function classes,1
574,PEP 574 – Pickle protocol 5 with out-of-band data,1
575,PEP 575 – Unifying function/method classes,1
573,PEP 573 – Module State Access from C Extension Methods,1
572,PEP 572 – Assignment Expressions,1
571,PEP 571 – The manylinux2010 Platform Tag,1
570,PEP 570 – Python Positional-Only Parameters,1
569,PEP 569 – Python 3.8 Release Schedule,1
568,PEP 568 – Generator-sensitivity for Context Variables,1
566,PEP 566 – Metadata for Python Software Packages 2.1,1
565,PEP 565 – Show DeprecationWarning in __main__,1
564,PEP 564 – Add new time functions with nanosecond resolution,1
567,PEP 567 – Context Variables,1
561,PEP 561 – Distributing and Packaging Type Information,1
559,PEP 559 – Built-in noop(),1
560,PEP 560 – Core support for typing module and generic types,1
558,PEP 558 – Defined semantics for locals(),1
556,PEP 556 – Threaded garbage collection,1
557,PEP 557 – Data Classes,1
563,PEP 563 – Postponed Evaluation of Annotations,1
555,PEP 555 – Context-local variables (contextvars),1
553,PEP 553 – Built-in breakpoint(),1
562,PEP 562 – Module __getattr__ and __dir__,1
549,PEP 549 – Instance Descriptors,1
552,PEP 552 – Deterministic pycs,1
554,PEP 554 – Multiple Interpreters in the Stdlib,1
550,PEP 550 – Execution Context,1
551,PEP 551 – Security transparency in the Python runtime,1
548,PEP 548 – More Flexible Loop Control,1
546,PEP 546 – Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,1
547,PEP 547 – Running extension modules using the -m option,1
545,PEP 545 – Python Documentation Translations,1
544,PEP 544 – Protocols: Structural subtyping (static duck typing),1
543,PEP 543 – A Unified TLS API for Python,1
542,PEP 542 – Dot Notation Assignment In Function Header,1
541,PEP 541 – Package Index Name Retention,1
539,PEP 539 – A New C-API for Thread-Local Storage in CPython,1
538,PEP 538 – Coercing the legacy C locale to a UTF-8 based locale,1
540,PEP 540 – Add a new UTF-8 Mode,1
536,PEP 536 – Final Grammar for Literal String Interpolation,1
537,PEP 537 – Python 3.7 Release Schedule,1
535,PEP 535 – Rich comparison chaining,1
534,PEP 534 – Improved Errors for Missing Standard Library Modules,1
533,PEP 533 – Deterministic cleanup for iterators,1
530,PEP 530 – Asynchronous Comprehensions,1
529,PEP 529 – Change Windows filesystem encoding to UTF-8,1
531,PEP 531 – Existence checking operators,1
532,PEP 532 – A circuit breaking protocol and binary operators,1
528,PEP 528 – Change Windows console encoding to UTF-8,1
526,PEP 526 – Syntax for Variable Annotations,1
525,PEP 525 – Asynchronous Generators,1
527,PEP 527 – Removing Un(der)used file types/extensions on PyPI,1
521,PEP 521 – Managing global context via ‘with’ blocks in generators and coroutines,1
524,PEP 524 – Make os.urandom() blocking on Linux,1
523,PEP 523 – Adding a frame evaluation API to CPython,1
522,PEP 522 – Allow BlockingIOError in security sensitive APIs,1
518,PEP 518 – Specifying Minimum Build System Requirements for Python Projects,1
517,PEP 517 – A build-system independent format for source trees,1
520,PEP 520 – Preserving Class Attribute Definition Order,1
519,PEP 519 – Adding a file system path protocol,1
515,PEP 515 – Underscores in Numeric Literals,1
514,PEP 514 – Python registration in the Windows registry,1
516,PEP 516 – Build system abstraction for pip/conda etc,1
513,PEP 513 – A Platform Tag for Portable Linux Built Distributions,1
512,PEP 512 – Migrating from hg.python.org to GitHub,1
511,PEP 511 – API for code transformers,1
510,PEP 510 – Specialize functions with guards,1
509,PEP 509 – Add a private version to dict,1
507,PEP 507 – Migrate CPython to Git and GitLab,1
506,PEP 506 – Adding A Secrets Module To The Standard Library,1
508,PEP 508 – Dependency specification for Python Software Packages,1
505,PEP 505 – None-aware operators,1
503,PEP 503 – Simple Repository API,1
504,PEP 504 – Using the System RNG by default,1
502,PEP 502 – String Interpolation - Extended Discussion,1
501,PEP 501 – General purpose string interpolation,1
499,PEP 499 – ,1
500,PEP 500 – A protocol for delegating datetime methods to their tzinfo implementations,1
497,PEP 497 – A standard mechanism for backward compatibility,1
498,PEP 498 – Literal String Interpolation,1
496,PEP 496 – Environment Markers,1
495,PEP 495 – Local Time Disambiguation,1
494,PEP 494 – Python 3.6 Release Schedule,1
493,PEP 493 – HTTPS verification migration tools for Python 2.7,1
491,PEP 491 – The Wheel Binary Package Format 1.9,1
492,PEP 492 – Coroutines with async and await syntax,1
490,PEP 490 – Chain exceptions at C level,1
489,PEP 489 – Multi-phase extension module initialization,1
487,PEP 487 – Simpler customisation of class creation,1
488,PEP 488 – Elimination of PYO files,1
486,PEP 486 – Make the Python Launcher aware of virtual environments,1
485,PEP 485 – A Function for testing approximate equality,1
483,PEP 483 – The Theory of Type Hints,1
484,PEP 484 – Type Hints,1
481,"PEP 481 – Migrate CPython to Git, Github, and Phabricator",1
482,PEP 482 – Literature Overview for Type Hints,1
479,PEP 479 – Change StopIteration handling inside generators,1
480,PEP 480 – Surviving a Compromise of PyPI: End-to-end signing of packages,1
478,PEP 478 – Python 3.5 Release Schedule,1
476,PEP 476 – Enabling certificate verification by default for stdlib http clients,1
477,PEP 477 – Backport ensurepip (PEP 453) to Python 2.7,1
474,PEP 474 – Creating forge.python.org,1
473,PEP 473 – Adding structured data to built-in exceptions,1
472,PEP 472 – Support for indexing with keyword arguments,1
471,PEP 471 – os.scandir() function – a better and faster directory iterator,1
470,PEP 470 – Removing External Hosting Support on PyPI,1
468,PEP 468 – Preserving the order of **kwargs in a function.,1
467,PEP 467 – Minor API improvements for binary sequences,1
469,PEP 469 – Migration of dict iteration code to Python 3,1
475,PEP 475 – Retry system calls failing with EINTR,1
466,PEP 466 – Network Security Enhancements for Python 2.7.x,1
464,PEP 464 – Removal of the PyPI Mirror Authenticity API,1
465,PEP 465 – A dedicated infix operator for matrix multiplication,1
463,PEP 463 – Exception-catching expressions,1
462,PEP 462 – Core development workflow automation for CPython,1
461,PEP 461 – Adding % formatting to bytes and bytearray,1
460,PEP 460 – Add binary interpolation and formatting,1
459,PEP 459 – Standard Metadata Extensions for Python Software Packages,1
458,PEP 458 – Secure PyPI downloads with signed repository metadata,1
456,PEP 456 – Secure and interchangeable hash algorithm,1
457,PEP 457 – Notation For Positional-Only Parameters,1
455,PEP 455 – Adding a key-transforming dictionary to collections,1
454,PEP 454 – Add a new tracemalloc module to trace Python memory allocations,1
452,PEP 452 – API for Cryptographic Hash Functions v2.0,1
453,PEP 453 – Explicit bootstrapping of pip in Python installations,1
450,PEP 450 – Adding A Statistics Module To The Standard Library,1
451,PEP 451 – A ModuleSpec Type for the Import System,1
449,PEP 449 – Removal of the PyPI Mirror Auto Discovery and Naming Scheme,1
448,PEP 448 – Additional Unpacking Generalizations,1
446,PEP 446 – Make newly created file descriptors non-inheritable,1
447,PEP 447 – Add __getdescriptor__ method to metaclass,1
445,PEP 445 – Add new APIs to customize Python memory allocators,1
444,PEP 444 – Python Web3 Interface,1
443,PEP 443 – Single-dispatch generic functions,1
442,PEP 442 – Safe object finalization,1
441,PEP 441 – Improving Python ZIP Application Support,1
440,PEP 440 – Version Identification and Dependency Specification,1
439,PEP 439 – Inclusion of implicit pip bootstrap in Python installation,1
438,PEP 438 – Transitioning to release-file hosting on PyPI,1
437,"PEP 437 – A DSL for specifying signatures, annotations and argument converters",1
434,PEP 434 – IDLE Enhancement Exception for All Branches,1
435,PEP 435 – Adding an Enum type to the Python standard library,1
436,PEP 436 – The Argument Clinic DSL,1
432,PEP 432 – Restructuring the CPython startup sequence,1
433,PEP 433 – Easier suppression of file descriptor inheritance,1
428,PEP 428 – The pathlib module – object-oriented filesystem paths,1
429,PEP 429 – Python 3.4 Release Schedule,1
431,PEP 431 – Time zone support improvements,1
430,PEP 430 – Migrating to Python 3 as the default online documentation,1
427,PEP 427 – The Wheel Binary Package Format 1.0,1
426,PEP 426 – Metadata for Python Software Packages 2.0,1
424,PEP 424 – A method for exposing a length hint,1
425,PEP 425 – Compatibility Tags for Built Distributions,1
422,PEP 422 – Simpler customisation of class creation,1
423,PEP 423 – Naming conventions and recipes related to packaging,1
421,PEP 421 – Adding sys.implementation,1
420,PEP 420 – Implicit Namespace Packages,1
419,PEP 419 – Protecting cleanup statements from interruptions,1
418,"PEP 418 – Add monotonic time, performance counter, and process time functions",1
417,PEP 417 – Including mock in the Standard Library,1
416,PEP 416 – Add a frozendict builtin type,1
415,PEP 415 – Implement context suppression with exception attributes,1
414,PEP 414 – Explicit Unicode Literal for Python 3.3,1
413,PEP 413 – Faster evolution of the Python Standard Library,1
412,PEP 412 – Key-Sharing Dictionary,1
411,PEP 411 – Provisional packages in the Python standard library,1
410,PEP 410 – Use decimal.Decimal type for timestamps,1
409,PEP 409 – Suppressing exception context,1
408,PEP 408 – Standard library __preview__ package,1
405,PEP 405 – Python Virtual Environments,1
407,PEP 407 – New release cycle and introducing long-term support versions,1
406,PEP 406 – Improved Encapsulation of Import State,1
404,PEP 404 – Python 2.8 Un-release Schedule,1
403,PEP 403 – General purpose decorator clause (aka “@in” clause),1
401,PEP 401 – BDFL Retirement,1
402,PEP 402 – Simplified Package Layout and Partitioning,1
400,PEP 400 – Deprecate codecs.StreamReader and codecs.StreamWriter,1
399,PEP 399 – Pure Python/C Accelerator Module Compatibility Requirements,1
398,PEP 398 – Python 3.3 Release Schedule,1
397,PEP 397 – Python launcher for Windows,1
396,PEP 396 – Module Version Numbers,1
395,PEP 395 – Qualified Names for Modules,1
394,PEP 394 – The “python” Command on Unix-Like Systems,1
393,PEP 393 – Flexible String Representation,1
392,PEP 392 – Python 3.2 Release Schedule,1
391,PEP 391 – Dictionary-Based Configuration For Logging,1
390,PEP 390 – Static metadata for Distutils,1
387,PEP 387 – Backwards Compatibility Policy,1
389,PEP 389 – argparse - New Command Line Parsing Module,1
386,PEP 386 – Changing the version comparison module in Distutils,1
384,PEP 384 – Defining a Stable ABI,1
385,PEP 385 – Migrating from Subversion to Mercurial,1
383,PEP 383 – Non-decodable Bytes in System Character Interfaces,1
382,PEP 382 – Namespace Packages,1
381,PEP 381 – Mirroring infrastructure for PyPI,1
378,PEP 378 – Format Specifier for Thousands Separator,1
380,PEP 380 – Syntax for Delegating to a Subgenerator,1
379,PEP 379 – Adding an Assignment Expression,1
377,PEP 377 – Allow __enter__() methods to skip the statement body,1
375,PEP 375 – Python 3.1 Release Schedule,1
373,PEP 373 – Python 2.7 Release Schedule,1
371,PEP 371 – Addition of the multiprocessing package to the standard library,1
372,PEP 372 – Adding an ordered dictionary to collections,1
376,PEP 376 – Database of Installed Python Distributions,1
370,PEP 370 – Per user site-packages directory,1
369,PEP 369 – Post import hooks,1
366,PEP 366 – Main module explicit relative imports,1
368,PEP 368 – Standard image protocol and class,1
365,PEP 365 – Adding the pkg_resources module,1
367,PEP 367 – New Super,1
364,PEP 364 – Transitioning to the Py3K Standard Library,1
374,PEP 374 – Choosing a distributed VCS for the Python project,1
362,PEP 362 – Function Signature Object,1
361,PEP 361 – Python 2.6 and 3.0 Release Schedule,1
363,PEP 363 – Syntax For Dynamic Attribute Access,1
360,PEP 360 – Externally Maintained Packages,1
359,PEP 359 – The “make” Statement,1
358,PEP 358 – The “bytes” Object,1
357,PEP 357 – Allowing Any Object to be Used for Slicing,1
356,PEP 356 – Python 2.5 Release Schedule,1
355,PEP 355 – Path - Object oriented filesystem paths,1
354,PEP 354 – Enumerations in Python,1
353,PEP 353 – Using ssize_t as the index type,1
351,PEP 351 – The freeze protocol,1
352,PEP 352 – Required Superclass for Exceptions,1
350,PEP 350 – Codetags,1
347,PEP 347 – Migrating the Python CVS to Subversion,1
348,PEP 348 – Exception Reorganization for Python 3.0,1
349,PEP 349 – Allow str() to return unicode strings,1
345,PEP 345 – Metadata for Python Software Packages 1.2,1
344,PEP 344 – Exception Chaining and Embedded Tracebacks,1
346,PEP 346 – User Defined (”,1
343,PEP 343 – The “with” Statement,1
341,PEP 341 – Unifying try-except and try-finally,1
342,PEP 342 – Coroutines via Enhanced Generators,1
337,PEP 337 – Logging Usage in the Standard Library,1
340,PEP 340 – Anonymous Block Statements,1
338,PEP 338 – Executing modules as scripts,1
336,PEP 336 – Make None Callable,1
339,PEP 339 – Design of the CPython Compiler,1
334,PEP 334 – Simple Coroutines via SuspendIteration,1
335,PEP 335 – Overloadable Boolean Operators,1
330,PEP 330 – Python Bytecode Verification,1
332,PEP 332 – Byte vectors and String/Unicode Unification,1
333,PEP 333 – Python Web Server Gateway Interface v1.0,1
331,PEP 331 – Locale-Independent Float/String Conversions,1
328,PEP 328 – Imports: Multi-Line and Absolute/Relative,1
329,PEP 329 – Treating Builtins as Constants in the Standard Library,1
327,PEP 327 – Decimal Data Type,1
326,PEP 326 – A Case for Top and Bottom Values,1
325,PEP 325 – Resource-Release Support for Generators,1
321,PEP 321 – Date/Time Parsing and Formatting,1
323,PEP 323 – Copyable Iterators,1
322,PEP 322 – Reverse Iteration,1
320,PEP 320 – Python 2.4 Release Schedule,1
324,PEP 324 – subprocess - New process module,1
318,PEP 318 – Decorators for Functions and Methods,1
319,PEP 319 – Python Synchronize/Asynchronize Block,1
317,PEP 317 – Eliminate Implicit Exception Instantiation,1
315,PEP 315 – Enhanced While Loop,1
316,PEP 316 – Programming by Contract for Python,1
314,PEP 314 – Metadata for Python Software Packages 1.1,1
311,PEP 311 – Simplified Global Interpreter Lock Acquisition for Extensions,1
310,PEP 310 – Reliable Acquisition/Release Pairs,1
312,PEP 312 – Simple Implicit Lambda,1
313,PEP 313 – Adding Roman Numeral Literals to Python,1
309,PEP 309 – Partial Function Application,1
306,PEP 306 – How to Change Python’s Grammar,1
307,PEP 307 – Extensions to the pickle protocol,1
308,PEP 308 – Conditional Expressions,1
305,PEP 305 – CSV File API,1
304,PEP 304 – Controlling Generation of Bytecode Files,1
303,PEP 303 – Extend divmod() for Multiple Divisors,1
302,PEP 302 – New Import Hooks,1
301,PEP 301 – Package Index and Metadata for Distutils,1
299,PEP 299 – Special __main__() function in modules,1
297,PEP 297 – Support for System Upgrades,1
298,PEP 298 – The Locked Buffer Interface,1
296,PEP 296 – Adding a bytes Object Type,1
295,PEP 295 – Interpretation of multiline string constants,1
294,PEP 294 – Type Names in the types Module,1
293,PEP 293 – Codec Error Handling Callbacks,1
292,PEP 292 – Simpler String Substitutions,1
288,PEP 288 – Generators Attributes and Exceptions,1
289,PEP 289 – Generator Expressions,1
290,PEP 290 – Code Migration and Modernization,1
291,PEP 291 – Backward Compatibility for the Python 2 Standard Library,1
287,PEP 287 – reStructuredText Docstring Format,1
284,PEP 284 – Integer for-loops,1
286,PEP 286 – Enhanced Argument Tuples,1
285,PEP 285 – Adding a bool type,1
283,PEP 283 – Python 2.3 Release Schedule,1
281,PEP 281 – Loop Counter Iteration with range and xrange,1
282,PEP 282 – A Logging System,1
279,PEP 279 – The enumerate() built-in function,1
280,PEP 280 – Optimizing access to globals,1
278,PEP 278 – Universal Newline Support,1
276,PEP 276 – Simple Iterator for ints,1
277,PEP 277 – Unicode file name support for Windows NT,1
274,PEP 274 – Dict Comprehensions,1
275,PEP 275 – Switching on Multiple Values,1
273,PEP 273 – Import Modules from Zip Archives,1
272,PEP 272 – API for Block Encryption Algorithms v1.0,1
270,PEP 270 – uniq method for list objects,1
271,PEP 271 – Prefixing sys.path by command line option,1
269,PEP 269 – Pgen Module for Python,1
268,PEP 268 – Extended HTTP functionality and WebDAV,1
263,PEP 263 – Defining Python Source Code Encodings,1
265,PEP 265 – Sorting Dictionaries by Value,1
267,PEP 267 – Optimized Access to Module Namespaces,1
266,PEP 266 – Optimizing Global Variable/Attribute Access,1
264,PEP 264 – Future statements in simulated shells,1
262,PEP 262 – A Database of Installed Python Packages,1
261,PEP 261 – Support for “wide” Unicode characters,1
260,PEP 260 – Simplify xrange(),1
259,PEP 259 – Omit printing newline after newline,1
258,PEP 258 – Docutils Design Specification,1
257,PEP 257 – Docstring Conventions,1
256,PEP 256 – Docstring Processing System Framework,1
255,PEP 255 – Simple Generators,1
254,PEP 254 – Making Classes Look More Like Types,1
249,PEP 249 – Python Database API Specification v2.0,1
253,PEP 253 – Subtyping Built-in Types,1
251,PEP 251 – Python 2.2 Release Schedule,1
250,PEP 250 – Using site-packages on Windows,1
252,PEP 252 – Making Types Look More Like Classes,1
248,PEP 248 – Python Database API Specification v1.0,1
247,PEP 247 – API for Cryptographic Hash Functions,1
246,PEP 246 – Object Adaptation,1
245,PEP 245 – Python Interface Syntax,1
244,PEP 244 – The ,1
243,PEP 243 – Module Repository Upload Mechanism,1
242,PEP 242 – Numeric Kinds,1
241,PEP 241 – Metadata for Python Software Packages,1
240,PEP 240 – Adding a Rational Literal to Python,1
239,PEP 239 – Adding a Rational Type to Python,1
238,PEP 238 – Changing the Division Operator,1
237,PEP 237 – Unifying Long Integers and Integers,1
236,PEP 236 – Back to the __future__,1
235,PEP 235 – Import on Case-Insensitive Platforms,1
219,PEP 219 – Stackless Python,1
218,PEP 218 – Adding a Built-In Set Object Type,1
217,PEP 217 – Display Hook for Interactive Use,1
210,PEP 210 – Decoupling the Interpreter Loop,1
216,PEP 216 – Docstring Format,1
209,PEP 209 – Multi-dimensional Arrays,1
215,PEP 215 – String Interpolation,1
208,PEP 208 – Reworking the Coercion Model,1
214,PEP 214 – Extended Print Statement,1
207,PEP 207 – Rich Comparisons,1
213,PEP 213 – Attribute Access Handlers,1
212,PEP 212 – Loop Counter Iteration,1
206,PEP 206 – Python Advanced Library,1
205,PEP 205 – Weak References,1
211,PEP 211 – Adding A New Outer Product Operator,1
204,PEP 204 – Range Literals,1
203,PEP 203 – Augmented Assignments,1
202,PEP 202 – List Comprehensions,1
201,PEP 201 – Lockstep Iteration,1
200,PEP 200 – Python 2.0 Release Schedule,1
160,PEP 160 – Python 1.6 Release Schedule,1
101,PEP 101 – Doing Python Releases 101,1
102,PEP 102 – Doing Python Micro Releases,1
103,PEP 103 – Collecting information about git,1
20,PEP 20 – The Zen of Python,1
42,PEP 42 – Feature Requests,1
100,PEP 100 – Python Unicode Integration,1
13,PEP 13 – Python Language Governance,1
12,PEP 12 – Sample reStructuredText PEP Template,1
8,PEP 8 – Style Guide for Python Code,1
10,PEP 10 – Voting Guidelines,1
11,PEP 11 – CPython platform support,1
9,PEP 9 – Sample Plaintext PEP Template,1
5,PEP 5 – Guidelines for Language Evolution,1
7,PEP 7 – Style Guide for C Code,1
6,PEP 6 – Bug Fix Releases,1
4,PEP 4 – Deprecation of Standard Modules,1
3,PEP 3 – Guidelines for Handling Bug Reports,1
2,PEP 2 – Procedure for Adding New Modules,1
